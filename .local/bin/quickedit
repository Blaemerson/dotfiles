#!/usr/bin/env sh

# Quickly find and open files to edit.

ScriptName=${0##*/}
Version=1.0.0
Deps='fzf fd'

ConfigFileDefault=${XDG_CONFIG_HOME:-$HOME/.config}/$ScriptName/config

EnvConfigFileVar=$(printf '%s_CONFIG' "$ScriptName" | tr '[a-z]' '[A-Z]')
EnvConfigFileValue=$(eval printf '%s' \"\$$EnvConfigFileVar\")
ConfigFile=${EnvConfigFileValue:-$ConfigFileDefault}

[ "$EnvConfigFileValue" ] && ConfigFileStatus="Currently \033[1;34m$EnvConfigFileVar\033[0m=$ConfigFile" || \
    ConfigFileStatus="Currently \033[1;34m$EnvConfigFileVar\033[0m is not set."

HelpMessage="\033[32m$ScriptName\033[0m $Version
Alexander Chaplin Braz <contact@alexchaplinbraz.com>

Quickly find and open files to edit. By default uses 'fzf' for displaying found
files, but can alternatively use 'dmenu'.

Can set a full path to a config file with \033[1;34m$EnvConfigFileVar\033[0m,
but if not set it defaults to: '$ConfigFileDefault'
$ConfigFileStatus

To know more about how to configure this script, create a default config with
'--create-confg' or read it with '--print-template'.

\033[33mUSAGE:\033[0m
    $ScriptName [FLAG]

\033[33mFLAGS:\033[0m
    \033[32m-c\033[0m, \033[32m--create-config\033[0m     Create template config. Overwrites existing config.
    \033[32m-d\033[0m, \033[32m--use-dmenu\033[0m         Use 'dmenu' to show the files instead of 'fzf'.
    \033[32m-h\033[0m, \033[32m--help\033[0m              Print help and exit.
    \033[32m-p\033[0m, \033[32m--print-template\033[0m    Print the template config to stdout.
    \033[32m-v\033[0m, \033[32m--version\033[0m           Print version and exit.

\033[33mDEPENDENCIES:\033[0m
    $Deps
"

ConfigTemplate="# This is essentially a script that is loaded and run inside $ScriptName to
# get the shell variables. That means you could technically run other code too.
# Avoid doing that if you don't know what you're doing.

# Set the editor to use for opening files.
Editor=\$EDITOR

# Optionally, use 'dmenu' to show found files. Uncomment to enable.
# Or use the '--use-dmenu' option.
#UseDmenu=true

# Options for 'fd'. Keep in mind that some options like '--list-details'
# break the script.
# FdOptions='--absolute-path --type file --type symlink'

# Options for 'fzf'.
FzfOptions=\"--prompt='Select file to edit: '\"

# Options for 'dmenu'.
DmenuOptions=\"-i -l 30 -p 'Select file to edit: '\"

# Set separator used for separating the path from the depth. Can't be empty.
Sep='|||'

# Set the default depth of the search.
DefaultDepth=1

# Set the directories where to search for files and how deep to search. These
# should be full paths, the separator and an integer for the depth. The
# separator and depth can be omitted, in which case it's default. If a
# directory isn't valid, a warning is printed to stdout but the script keeps
# running. Blank lines and lines starting with # are ignored. Leave the whole
# variable blank to search in current directory with default depth.
Locations=\"
\$HOME/documents\${Sep}3
\$HOME/a-directory-that-probably-does-not-exist
\$XDG_CONFIG_HOME    \$Sep    2
\$XDG_DATA_HOME|||4
\$HOME
\"

# Set what to filter out from the found files. Follows the same format as
# '.gitignore'. Blank lines and lines starting with # are ignored.
Exclusions='
*.pdf
*.docx
*.doc
*.gpg
*.tdb
*.sql
'

"

error() {
    printf "\033[1;31m${2:-ERROR}\033[0m: %s.\nTry '%s --help' for more information.\n" \
        "$1" "$ScriptName" 1>&2
    exit 1
}

warning() { printf "\033[1;33m${2:-WARNING}\033[0m: %s.\n" "$1" 1>&2; }

info() { printf "\033[1;34m${2:-INFO}\033[0m: %s.\n" "$1" 1>&2; }

case $1 in
    -h|--help) printf '%b' "$HelpMessage"; exit 0 ;;
    -v|--version) printf '%s\n' "$Version"; exit 0 ;;
    -c|--create-config)
        mkdir -p "${ConfigFile%/*}"
        printf '%s' "$ConfigTemplate" > "$ConfigFile"
        info "template config created at '$ConfigFile'"
        printf 'Read it for instructions on how to set everything up.\n'
        exit 0 ;;
    -p|--print-template) printf '%s' "$ConfigTemplate"; exit 0 ;;
    -d|--use-dmenu) UseDmenu=true ;;
    '') ;;
    *) error "unknown argument '$1'" ;;
esac

[ ! -f "$ConfigFile" ] && error "'$ConfigFile' is not a valid file"

. "$ConfigFile"

[ -z "$Editor" ] && error "'Editor' must be set"
[ -z "$Sep" ] && error "'Sep' cannot be empty"

[ $UseDmenu ] && Deps='dmenu fd'

for dep in $Deps; do ! command -v $dep 1>/dev/null && MissingDeps="$MissingDeps $dep"; done
[ "$MissingDeps" ] && error "missing dependencies:$MissingDeps"

IFS=${IFS#??}
for line in $Exclusions; do
    [ -z "$line" ] && continue
    printf '%s' "$line" | grep -q '^#' && continue
    ExclusionOptions=$ExclusionOptions$(printf " -E '%s' " "$line")
done

for line in ${Locations:-.}; do
    [ -z "$line" ] && continue
    printf '%s' "$line" | grep -q '^#' && continue
    if printf '%s' "$line" | grep -q "$Sep"; then
        path=${line%$Sep*}
        path=${path%% *}
        depth=${line#*$Sep}
        depth=$(printf '%s' "$depth" | tr -d '[:space:]')
        [ -z "$depth" ] && depth=$DefaultDepth
    else
        path=${line%% *}
        depth=$DefaultDepth
    fi
    [ ! -d "$path" ] && warning "'$path' is not a valid directory" && continue
    Files=$(printf '%s\n%s' "$Files" "$(eval fd $FdOptions -d $depth $ExclusionOptions . "$path")")
done

if [ $UseDmenu ]; then
    SelectedFile=$(printf '%s' "$Files" | eval dmenu $DmenuOptions)
else
    SelectedFile=$(printf '%s' "$Files" | eval fzf $FzfOptions)
fi

[ -z "$SelectedFile" ] && exit 0

eval $Terminal -e $Editor "$SelectedFile"
